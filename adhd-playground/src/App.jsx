import React, {useMemo, useRef, useState, useEffect} from "react";

// ‚òÖ ÂøÖÂä†ÔºöÊää React Êö¥Èú≤Âà∞ÂÖ®Â±ÄÔºå‰æõËá™Áî±Ê®°ÂºèÊ®°Âùó‰ΩøÁî®
if (typeof window !== "undefined") {
    window.React = window.React || React;
}

/**
 * ADHD Ë∂£Âë≥ÂåñÈáèË°®Â∞èÊ∏∏ÊàèÔºàÂçïÊñá‰ª∂ React ÁªÑ‰ª∂Ôºâ‚Äî Ê®°Êùø/Ëá™Áî±ÁîüÊàêÂêàÂπ∂Áâà
 * ËØ¥ÊòéÔºö
 * - Á∫ØÂâçÁ´Ø DemoÔºåÂÖÅËÆ∏Âú®ÊµèËßàÂô®Á≤òË¥¥ OpenAI API KeyÔºà‰ªÖÊú¨Âú∞ÂÜÖÂ≠òÔºå‰∏ç‰∏ä‰º†Ôºâ„ÄÇ
 * - Êñ∞Â¢û‚ÄúËá™Áî±ÁîüÊàêÔºàfreeformÔºâ‚ÄùÊ®°ÂºèÔºöLLM ËæìÂá∫‰∏Ä‰∏™ÂèØËøêË°åÁöÑ React ÁªÑ‰ª∂ÔºàES ModuleÔºâÔºåÂπ∂ÈôÑÂ∏¶ meta.rules ‰∏é explain()„ÄÇ
 * - Áîü‰∫ßÁéØÂ¢ÉËØ∑Â∞Ü API Ë∞ÉÁî®ËøÅÁßªÂà∞ÂêéÁ´ØÔºåÂª∫ËÆÆÈÖçÂêà iframe sandbox ÊàñÊúçÂä°Á´ØÊ≤ôÁÆ±„ÄÇ
 */

export default function ADHDPlayground() {
    const [apiKey, setApiKey] = useState("");
    const [rawScale, setRawScale] = useState("");
    const [scaleName, setScaleName] = useState("Êú™ÂëΩÂêçÈáèË°®");
    const [theme, setTheme] = useState("animals");
    const [customTokens, setCustomTokens] = useState("üê∂ üê± üê∞");
    const [status, setStatus] = useState("idle"); // idle | generating | playing | finished
    const [error, setError] = useState("");

    // Êñ∞Â¢ûÔºöÁé©Ê≥ïÊ®°Âºè + Ëá™Áî±Ê®°Âºè‰ª£Á†Å/ÈîôËØØ
    const [mode, setMode] = useState("template"); // "template" | "freeform"
    const [aiGameCode, setAiGameCode] = useState("");
    const [runtimeErr, setRuntimeErr] = useState("");

    const [gameSpec, setGameSpec] = useState(null); // Ê®°ÊùøÊ®°ÂºèÔºöLLM/ÈªòËÆ§ÁîüÊàêÁöÑËßÑÊ†º
    const [gameResult, setGameResult] = useState(null); // Ê∏∏ÊàèËøîÂõûÁöÑÊåáÊ†á
    const [reportText, setReportText] = useState("");

    // Ëá™Áî±Ê®°ÂºèÔºö‰øùÂ≠ò LLM ÂØºÂá∫ÁöÑÂÖÉ‰ø°ÊÅØÔºàËßÑÂàô/Ê†áÈ¢òÁ≠âÔºâ // UPDATE: Êñ∞Â¢û
    const [freeformMeta, setFreeformMeta] = useState(null);

    // ‰∏ªÈ¢òÈ¢ÑËÆæ
    const themes = [
        {id: "animals", label: "Â∞èÂä®Áâ©", defaults: "üê∂ üê± üê∞ üêº ü¶ä ü¶Å"},
        {id: "plants", label: "Ê§çÁâ©Âõ≠", defaults: "üå± üåø üåº üå∑ üåµ üçÄ"},
        {id: "space", label: "Â§™Á©∫", defaults: "ü™ê üåü üöÄ üëΩ üåå ‚òÑÔ∏è"},
        {id: "ocean", label: "Êµ∑Ê¥ã", defaults: "üê† üê≥ üêô üê¨ üêö ü¶Ä"},
        {id: "vehicles", label: "‰∫§ÈÄö", defaults: "üöó üöå üö≤ üöÄ üöÉ üöÅ"},
        {id: "custom", label: "Ëá™ÂÆö‰πâ", defaults: "‚≠êÔ∏è üí° üéà"},
    ];

    // ‚Äî‚Äî Ëß£ÊûêÈáèË°®
    const parsedScale = useMemo(() => {
        const text = rawScale.trim();
        if (!text) return {items: [], meta: {}};
        try {
            if (text.startsWith("[") || text.startsWith("{")) {
                const j = JSON.parse(text);
                if (Array.isArray(j)) {
                    return {items: j.map((t, i) => ({id: String(i + 1), text: String(t)})), meta: {fmt: "json-array"}};
                }
                if (Array.isArray(j.items)) {
                    return {
                        items: j.items.map((it, i) => ({
                            id: String(it.id ?? i + 1),
                            text: String(it.text ?? it.question ?? it)
                        })),
                        meta: {fmt: "json-obj"},
                    };
                }
            }
        } catch (_) {
        }
        if (text.includes(",") || text.includes("\n")) {
            const lines = text.split(/\r?\n/).map((l) => l.trim()).filter(Boolean);
            const items = lines.map((line, idx) => {
                const parts = line.split(",");
                if (parts.length >= 2) return {
                    id: parts[0].trim() || String(idx + 1),
                    text: parts.slice(1).join(",").trim()
                };
                return {id: String(idx + 1), text: line};
            });
            return {items, meta: {fmt: "csv-or-lines"}};
        }
        return {items: [{id: "1", text}], meta: {fmt: "raw"}};
    }, [rawScale]);

    const selectedTheme = themes.find((t) => t.id === theme) ?? themes[0];

    // Áî®‰∫éËá™Áî±Ê®°ÂºèËøêË°åÊó∂ÁöÑÂõûÈÄÄ tokensÔºà‰∏ç‰æùËµñ gameSpecÔºâ
    const tokensForPlay = useMemo(() => {
        const list = (theme === "custom" ? customTokens : selectedTheme.defaults)
            .split(/\s+/).map((s) => s.trim()).filter(Boolean);
        return list.length >= 2 ? list.slice(0, 8) : ["üôÇ", "üôÉ"];
    }, [theme, customTokens, selectedTheme]);

    function stripBOM(text) {
        return text.replace(/^\uFEFF/, "");
    }

    async function handleFileUpload(e) {
        const file = e.target.files?.[0];
        if (!file) return;
        try {
            const base = file.name.replace(/\.[^.]+$/, "");
            setScaleName((prev) => (prev && prev !== "Êú™ÂëΩÂêçÈáèË°®" ? prev : base));
            const reader = new FileReader();
            reader.onload = () => {
                const raw = typeof reader.result === "string" ? reader.result : "";
                setRawScale(stripBOM(raw));
            };
            reader.onerror = () => setError("ËØªÂèñÊñá‰ª∂Â§±Ë¥•ÔºåËØ∑Á°ÆËÆ§‰∏∫ JSON/CSV/TXT ÊñáÊú¨Êñá‰ª∂„ÄÇ");
            reader.readAsText(file, "utf-8");
        } catch (err) {
            setError(`ËØªÂèñÂ§±Ë¥•Ôºö${(err && err.message) || String(err)}`);
        } finally {
            e.target.value = "";
        }
    }

    // ‚Äî‚Äî ÁîüÊàêÔºàÊ®°Êùø / Ëá™Áî±Ôºâ
    async function handleGenerateSpec() {
        setError("");
        setRuntimeErr("");
        setGameSpec(null);
        setAiGameCode("");
        setGameResult(null);
        setReportText("");
        setFreeformMeta(null); // UPDATE: ÈáçÁΩÆ

        if (parsedScale.items.length === 0) {
            setError("ËØ∑ÂÖà‰∏ä‰º†ÊàñÁ≤òË¥¥ÈáèË°®ÂÜÖÂÆπ„ÄÇ");
            return;
        }

        setStatus("generating");

        const stimuliTokens = tokensForPlay;
        const safeTokens = stimuliTokens.length >= 2 ? stimuliTokens : ["üôÇ", "üôÉ"];

        // ÈªòËÆ§ËßÑÊ†ºÔºàGo/No-GoÔºâÔºåÊó∂Èïø 12s
        const defaultSpec = {
            template: "goNoGo",
            name: `${scaleName || "ADHD ‰ªªÂä°"} - Go/No-Go`,
            durationSec: 12,
            isiMs: 1000,
            targetRatio: 0.7,
            noGoToken: safeTokens[0] ?? "‚ùå",
            tokens: safeTokens,
            mapping: parsedScale.items.map((it) => ({itemId: it.id, weight: 1})),
            scoring: {
                weights: {commissionErr: 0.5, omissionErr: 0.3, meanRT: 0.2, rtVar: 0.2},
                advisories: [
                    {when: "commissionErr>0.25", text: "ÊäëÂà∂ÊéßÂà∂ÔºàNo-GoÔºâÂèØËÉΩÂ≠òÂú®Âõ∞Èöæ„ÄÇ"},
                    {when: "omissionErr>0.2", text: "ÊåÅÁª≠Ê≥®ÊÑè‰∏é‰∏ìÊ≥®ÂèØËÉΩ‰∏çË∂≥„ÄÇ"},
                    {when: "rtVar>180", text: "ÂèçÂ∫îÊó∂Ê≥¢Âä®ËæÉÂ§ßÔºåÂèØËÉΩÂ≠òÂú®Ê≥®ÊÑèÁª¥ÊåÅÊåëÊàò„ÄÇ"},
                ],
            },
        };

        // Êó† keyÔºöÊ®°Êùø/Ëá™Áî±ÈÉΩÂõûÈÄÄÂà∞Êú¨Âú∞Ê®°Êùø
        if (!apiKey) {
            setGameSpec(defaultSpec);
            setStatus("playing");
            return;
        }

        try {
            if (mode === "template") {
                const sys =
                    `You are a helpful game designer for pediatric ADHD pre-screening.
Return STRICT JSON ONLY.
Design a short, themed mini-game spec for web.
Allowed templates: "goNoGo", "oddball".
Fields: {
  template, name,
  durationSec(8-20), isiMs(600-1500), targetRatio(0.2-0.8),
  tokens[],
  noGoToken (for goNoGo),
  targetToken (for oddball),
  mapping[{itemId, weight}],
  scoring{weights, advisories[]}
}.
Prefer varying the template from game to game.`;

                const user = {
                    role: "user",
                    content:
                        `Scale name: ${scaleName}.
Items: ${parsedScale.items.map((i) => `${i.id}:${i.text}`).join(" | ")}.
Theme tokens to use: ${safeTokens.join(" ")}.
Ë¶ÅÊ±ÇÔºö‰∏•Ê†º JSONÔºå‰∏çË¶ÅËß£ÈáäÔºå‰∏çË¶Å Markdown„ÄÇ`,
                };

                const resp = await fetch("https://api.openai.com/v1/chat/completions", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        Authorization: `Bearer ${apiKey}`,
                    },
                    body: JSON.stringify({
                        model: "gpt-4o-mini",
                        messages: [
                            {role: "system", content: sys},
                            user,
                        ],
                        temperature: 0.3,
                        response_format: {type: "json_object"},
                    }),
                });

                const raw = await resp.text();
                if (!resp.ok) {
                    let msg = raw;
                    try {
                        msg = JSON.parse(raw).error?.message || raw;
                    } catch {
                    }
                    throw new Error(`LLM ËØ∑Ê±ÇÂ§±Ë¥•Ôºö${resp.status}ÔΩú${msg}`);
                }
                const data = JSON.parse(raw);
                const text = data.choices?.[0]?.message?.content || "{}";
                const spec = JSON.parse(text);

                const merged = {
                    ...defaultSpec,
                    ...spec,
                    durationSec: Math.min(20, Math.max(8, Number(spec.durationSec || defaultSpec.durationSec))),
                    tokens: Array.isArray(spec.tokens) && spec.tokens.length ? spec.tokens : defaultSpec.tokens,
                };
                merged.isiMs = Math.max(1000, Number(merged.isiMs ?? defaultSpec.isiMs) || defaultSpec.isiMs);

                setGameSpec(merged);
                setStatus("playing");
            } else {
                // === Ëá™Áî±Ê®°ÂºèÔºöËÆ©Ê®°ÂûãËæìÂá∫ÂÆåÊï¥ ES Module ÁªÑ‰ª∂‰ª£Á†Å + meta + explain ===
                const sys =
                    `You are a game coder. Output ONLY JavaScript ES Module code for a React component.
Rules:
- Must export default a React component function (no JSX; use React.createElement aliased as: const h = React.createElement).
- Do NOT write any import statements.
- Assume React is available globally: const React = window.React; const { useState, useEffect, useRef } = React.
- The game MUST visibly display a countdown timer (Chinese label ok) and MUST auto-finish within <=20 seconds.
- No network, no eval, no localStorage, no cookies, no timers beyond game lifecycle.
- Props: { onFinish, onCancel, tokens, durationSec } only.
- You MUST also export: 
    export const meta = {
      title: "‰∏≠ÊñáÊ†áÈ¢ò",
      rules: ["Ë¶ÅÁÇπ1", "Ë¶ÅÁÇπ2", "Ë¶ÅÁÇπ3"],       // concise Chinese bullet rules shown BEFORE start
      scoringNotes: "ÁÆÄËø∞Â¶Ç‰ΩïËÆ°ÁÆóÊåáÊ†áÔºà‰∏≠ÊñáÔºâ"   // brief note
    };
    export function explain(metrics) {          // return a short Chinese paragraph for parents
      // metrics: {hitRate, commissionErr, omissionErr, meanRT, rtVar, composite}
      return "‚Ä¶";
    }
- The component MUST call onFinish(metrics) within ~durationSec seconds.
- Keep code < 300 lines. Keep UI simple but playable.`;

                const user = {
                    role: "user",
                    content:
                        `Make a kid-friendly mini-game using these theme tokens: ${safeTokens.join(" ")}.
Game should be self-contained, mouse/touch friendly, and finish in ${12} seconds.
Use uploaded scale items (for flavor text or level names): ${parsedScale.items.slice(0, 10).map((i) => i.text).join(" | ")}.
Language: Chinese UI labels.`,
                };

                const resp = await fetch("https://api.openai.com/v1/chat/completions", {
                    method: "POST",
                    headers: {"Content-Type": "application/json", Authorization: `Bearer ${apiKey}`},
                    body: JSON.stringify({
                        model: "gpt-4o-mini",
                        messages: [{role: "system", content: sys}, user],
                        temperature: 0.5
                    }),
                });

                const raw = await resp.text();
                if (!resp.ok) {
                    let msg = raw;
                    try {
                        msg = JSON.parse(raw).error?.message || raw;
                    } catch {
                    }
                    throw new Error(`LLM ËØ∑Ê±ÇÂ§±Ë¥•Ôºö${resp.status}ÔΩú${msg}`);
                }
                const data = JSON.parse(raw);
                const code = data.choices?.[0]?.message?.content?.trim();
                if (!code || !/export\s+default/.test(code)) {
                    throw new Error("ËøîÂõûÂÜÖÂÆπ‰∏çÂê´ÊúâÊïàÁöÑ default ÂØºÂá∫ÁªÑ‰ª∂");
                }
                setAiGameCode(code);
                setStatus("playing");
            }
        } catch (e) {
            console.error(e);
            setError(`ÁîüÊàêÂ§±Ë¥•Ôºö${e.message}„ÄÇÂ∑≤ÂõûÈÄÄÂà∞Êú¨Âú∞ÈªòËÆ§ËßÑÊ†º„ÄÇ`);
            setGameSpec(defaultSpec);
            setStatus("playing");
        }
    }

    // ‚Äî‚Äî ÁªìÊûúËß£ÈáäÔºàÊ®°Êùø & Ëá™Áî±Ê®°ÂºèÂõûÈÄÄÔºâ
    async function handleExplainResult(metrics) {
        if (!metrics) return;
        if (!apiKey) { // Êú¨Âú∞ÂõûÈÄÄ
            const msgs = [];
            if (metrics.commissionErr > 0.25) msgs.push("No-Go ÊäëÂà∂ÈîôËØØËæÉÂ§ö");
            if (metrics.omissionErr > 0.2) msgs.push("ÈÅóÊºèÁéáËæÉÈ´òÔºàÂèØËÉΩ‰∏ìÊ≥®‰∏çË∂≥Ôºâ");
            if (metrics.rtVar > 180) msgs.push("ÂèçÂ∫îÊó∂Ê≥¢Âä®ÂÅèÂ§ß");
            setReportText(`„ÄêÈùûÂåªÁñóÁªìËÆ∫„ÄëÂ∞èÊ∏∏ÊàèÊòæÁ§∫Ôºö${msgs.join("Ôºõ") || "Êï¥‰ΩìË°®Áé∞Á®≥ÂÆö"}„ÄÇÂª∫ËÆÆÁªìÂêàÊ≠£ÂºèÈáèË°®‰∏é‰∏ì‰∏öËØÑ‰º∞ÁªºÂêàÂà§Êñ≠„ÄÇ`);
            return;
        }
        try {
            const sys = `You are a clinician-assistant. Write a short, empathetic, non-diagnostic summary for parents (Chinese), based on Go/No-Go or Oddball metrics. Avoid medical claims.`;
            const u = {
                role: "user",
                content: `Metrics: ${JSON.stringify(metrics)}\nËØ∑Áî®‰∏≠ÊñáÔºå‰ª• 2-4 Âè•Áü≠ÊÆµËêΩÔºåÈÅøÂÖçËØäÊñ≠ÊÄßËØçÊ±áÔºåÁªôÂá∫Ê∏©ÂíåÂª∫ËÆÆ„ÄÇ`
            };
            const resp = await fetch("https://api.openai.com/v1/chat/completions", {
                method: "POST",
                headers: {"Content-Type": "application/json", Authorization: `Bearer ${apiKey}`},
                body: JSON.stringify({
                    model: "gpt-4o-mini",
                    messages: [{role: "system", content: sys}, u],
                    temperature: 0.4
                }),
            });
            const raw = await resp.text();
            if (!resp.ok) {
                let msg = raw;
                try {
                    msg = JSON.parse(raw).error?.message || raw;
                } catch {
                }
                throw new Error(`LLM ËØ∑Ê±ÇÂ§±Ë¥•Ôºö${resp.status}ÔΩú${msg}`);
            }
            const data = JSON.parse(raw);
            const text = data.choices?.[0]?.message?.content?.trim() || "";
            setReportText(text);
        } catch (e) {
            setReportText(
                `„ÄêÊú¨Âú∞ÊëòË¶Å„ÄëÊÑüË∞¢ÂèÇ‰∏é„ÄÇÂ∞èÊ∏∏ÊàèÊåáÊ†áÊòæÁ§∫ÔºöÊäëÂà∂ÈîôËØØ ${(metrics.commissionErr * 100).toFixed(1)}%ÔºåÈÅóÊºè ${(metrics.omissionErr * 100).toFixed(1)}%ÔºåÂπ≥ÂùáÂèçÂ∫îÊó∂ ${metrics.meanRT.toFixed(0)}ms„ÄÇÂª∫ËÆÆÁªìÂêàÊ≠£ÂºèÈáèË°®‰∏é‰∏ì‰∏öËØÑ‰º∞„ÄÇ`
            );
        }
    }

    return (
        <div className="min-h-screen bg-[#fff8dc] text-slate-800 flex flex-col items-center">
            <header className="text-center px-4 py-6">
                <h1 className="text-2xl md:text-3xl font-bold">ADHD ‰∏™ÊÄßÂåñË∂£Âë≥Ê£ÄÊµã ¬∑ Â∞èÊ∏∏ÊàèÁîüÊàêÂô®</h1>
                <p className="text-sm text-slate-600 mt-1">‰ªÖ‰ΩúÊïôËÇ≤‰∏éÈ¢ÑÁ≠õÊü•ËæÖÂä©Â±ïÁ§∫Ôºå‰∏çËÉΩÊõø‰ª£‰∏ì‰∏öËØäÊñ≠„ÄÇ</p>
            </header>

            <main className="w-full px-4 py-10 md:py-16 flex flex-col gap-8">
            {/* ÈÖçÁΩÆÂç°Áâá */}
                {status !== "playing" && (
                    <section className="w-full max-w-5xl mx-auto grid gap-4 md:grid-cols-[2fr_1fr]">
                        {/* Â∑¶ÔºöÈáèË°®ËæìÂÖ• */}
                        <div className="bg-white rounded-2xl shadow p-4">
                            <h2 className="font-semibold mb-2">1) ‰∏ä‰º†ÊàñÁ≤òË¥¥ÈáèË°®</h2>
                            <input type="file" accept=".json,.csv,.txt" onChange={handleFileUpload}
                                   className="border rounded-lg px-3 py-2"/>
                            <div className="flex gap-2 items-center mb-2 mt-2">
                                <input className="border rounded-lg px-3 py-2 w-1/2" placeholder="ÈáèË°®ÂêçÁß∞ÔºàÂèØÈÄâÔºâ"
                                       value={scaleName} onChange={(e) => setScaleName(e.target.value)}/>
                                <label className="text-xs text-slate-500">ÊîØÊåÅ JSON / CSV / ÊØèË°å‰∏ÄÈ¢ò</label>
                            </div>
                            <textarea className="w-full h-48 border rounded-xl p-3 font-mono text-sm"
                                      placeholder={`Á§∫‰æãÔºàÊØèË°å‰∏ÄÈ¢òÔºâÔºö\n1, Âú®ËØæÂ†Ç‰∏äÂæàÈöæÂÆâÈùôÂùêÂ•Ω\n2, ÁªèÂ∏∏ÂàÜÂøÉÔºåÊ≥®ÊÑèÂäõÈöæ‰ª•Áª¥ÊåÅ\n...`}
                                      value={rawScale} onChange={(e) => setRawScale(e.target.value)}/>
                            <div className="flex flex-wrap gap-2 mt-2 text-xs text-slate-600">
                                <span>Â∑≤Ëß£ÊûêÊù°ÁõÆÔºö{parsedScale.items.length} Êù°</span>
                                {parsedScale.items.length > 0 && (
                                    <span
                                        className="truncate">Á§∫‰æãÔºö{parsedScale.items.slice(0, 3).map((i) => i.text).join(" / ")}{parsedScale.items.length > 3 ? "..." : ""}</span>
                                )}
                            </div>
                        </div>

                        {/* Âè≥Ôºö‰∏ªÈ¢ò & API Key & Ê®°Âºè */}
                        <div className="bg-white rounded-2xl shadow p-4">
                            <h2 className="font-semibold mb-2">2) ÈÄâÊã©‰∏ªÈ¢òÂÖÉÁ¥†</h2>
                            <div className="grid grid-cols-2 gap-4 mb-2">
                                {themes.map((t) => (
                                    <button key={t.id} onClick={() => setTheme(t.id)}
                                            className={`rounded-xl border px-3 py-3 text-center w-full ${theme === t.id ? "border-sky-500 bg-sky-50" : "hover:bg-slate-50"}`}>
                                        <div className="text-sm font-medium">{t.label}</div>
                                        <div className="text-lg mt-1">{t.defaults}</div>
                                    </button>
                                ))}
                            </div>

                            {theme === "custom" && (
                                <div className="mt-2">
                                    <label className="text-sm">Ëá™ÂÆö‰πâÂÖÉÁ¥†ÔºàÁî®Á©∫Ê†ºÂàÜÈöîÔºåÊîØÊåÅ emoji / ËØçËØ≠Ôºâ</label>
                                    <input className="mt-1 w-full border rounded-lg px-3 py-2" value={customTokens}
                                           onChange={(e) => setCustomTokens(e.target.value)}/>
                                </div>
                            )}

                            <div className="mt-4">
                                <h3 className="font-semibold mb-1">Áé©Ê≥ïÊ®°Âºè</h3>
                                <div className="grid grid-cols-2 gap-2 text-sm">
                                    <button
                                        className={`rounded-lg border px-3 py-2 ${mode === "template" ? "border-sky-500 bg-sky-50" : "hover:bg-slate-50"}`}
                                        onClick={() => setMode("template")}>Âõ∫ÂÆöÊ®°ÊùøÔºàÁ®≥Â¶•Ôºâ
                                    </button>
                                    <button
                                        className={`rounded-lg border px-3 py-2 ${mode === "freeform" ? "border-violet-500 bg-violet-50" : "hover:bg-slate-50"}`}
                                        onClick={() => setMode("freeform")}>Ëá™Áî±ÁîüÊàêÔºàÊØèÊ¨°‰∏çÂêåÔºâ
                                    </button>
                                </div>
                                <p className="text-xs text-slate-500 mt-1">Ëá™Áî±ÁîüÊàê‰ºöËÆ© AI ËæìÂá∫ÂÆåÊï¥ÁöÑÂ∞èÊ∏∏Êàè React
                                    ÁªÑ‰ª∂ÔºåÂπ∂ÈôÑÂ∏¶‚ÄúËßÑÂàô‚ÄùÂíå‚ÄúËß£ÈáäÂáΩÊï∞‚Äù„ÄÇ</p>
                            </div>

                            <div className="mt-4">
                                <h3 className="font-semibold mb-1">ÔºàÂèØÈÄâÔºâÁ≤òË¥¥ ChatGPT API Key</h3>
                                <input className="w-full border rounded-lg px-3 py-2" type="password"
                                       placeholder="sk-...Ôºà‰ªÖÁî®‰∫éÊú¨Âú∞ÊµèËßàÂô®ÂÜÖÂ≠òÔºâ" value={apiKey}
                                       onChange={(e) => setApiKey(e.target.value)}/>
                                <p className="text-xs text-slate-500 mt-1">Êú™Â°´‰πüÂèØËøêË°åÔºöÂ∞Ü‰ΩøÁî®Êú¨Âú∞ÈªòËÆ§Ê®°ÊùøÁîüÊàêÂ∞èÊ∏∏Êàè„ÄÇ</p>
                            </div>

                            <button onClick={handleGenerateSpec}
                                    className="mt-4 w-full rounded-xl bg-sky-600 text-white py-2 font-semibold shadow hover:bg-sky-700"
                                    disabled={status === "generating"}>
                                {status === "generating" ? "Ê≠£Âú®ÁîüÊàê‚Ä¶" : "3) ÁîüÊàêÂ∞èÊ∏∏Êàè"}
                            </button>

                            {error && <p className="text-sm text-rose-600 mt-2">{error}</p>}
                            {runtimeErr && <p className="text-sm text-rose-600 mt-2">ËøêË°åÈîôËØØÔºö{runtimeErr}</p>}
                        </div>
                    </section>
                )}

                {/* Ê∏∏Êàè & ÁªìÊûú */}
                {status === "playing" && (
                    <section className="w-full max-w-3xl mx-auto">
                        {mode === "template" ? (
                            gameSpec ? (
                                <GameRunner
                                    spec={gameSpec}
                                    onFinish={(metrics) => {
                                        setGameResult(metrics);
                                        setStatus("finished");
                                        handleExplainResult(metrics); // Ê®°ÊùøÊ®°ÂºèÊ≤øÁî®ÂéüËß£Èáä
                                    }}
                                    onCancel={() => setStatus("idle")}
                                />
                            ) : (
                                <p className="text-sm text-rose-600">Êú™ÂèñÂæóÊ®°ÊùøËßÑÊ†º„ÄÇ</p>
                            )
                        ) : aiGameCode ? (
                            <DynamicGameRunner
                                code={aiGameCode}
                                onFinish={(metrics) => {
                                    setGameResult(metrics);
                                    setStatus("finished");
                                }}
                                onCancel={() => setStatus("idle")}
                                fallbackTokens={tokensForPlay}
                                durationSec={12}
                                onError={(msg) => setRuntimeErr(String(msg || "Êú™Áü•ÈîôËØØ"))}
                                onExplainText={(text) => setReportText(text)}           // UPDATE: Êé•Êî∂Ëá™Áî±Ê®°ÂºèËß£Èáä
                                onMeta={(meta) => setFreeformMeta(meta)}                 // UPDATE: Êé•Êî∂Ëá™Áî±Ê®°ÂºèËßÑÂàô/Ê†áÈ¢ò
                                fallbackExplain={(m) => handleExplainResult(m)}          // UPDATE: Áº∫Â§± explain Êó∂ÁöÑÂõûÈÄÄ
                            />
                        ) : (
                            <p className="text-sm text-slate-600">Ê≠£Âú®ÂáÜÂ§áËá™Áî±ÁîüÊàêÂ∞èÊ∏∏Êàè‚Ä¶</p>
                        )}
                    </section>
                )}

                {status === "finished" && (
                    <section className="w-full max-w-5xl mx-auto grid gap-4 md:grid-cols-2">
                        <div className="bg-white rounded-2xl shadow p-4">
                            <h2 className="font-semibold">ÁªìÊûúÊåáÊ†á</h2>
                            {gameResult ? (
                                <ul className="mt-2 text-sm leading-7">
                                    <li>ÂëΩ‰∏≠ÁéáÔºàÁõÆÊ†áÊ≠£Á°ÆÁÇπÂáªÔºâÔºö{(gameResult.hitRate * 100).toFixed(1)}%</li>
                                    <li>ËØØÂáªÔºà‰∏çÂ∫îÁÇπÂç¥ÁÇπ‰∫ÜÔºâÔºö{(gameResult.commissionErr * 100).toFixed(1)}%</li>
                                    <li>ÈÅóÊºèÔºàÂ∫îÁÇπÊú™ÁÇπÔºâÔºö{(gameResult.omissionErr * 100).toFixed(1)}%</li>
                                    <li>Âπ≥ÂùáÂèçÂ∫îÊó∂Ôºö{gameResult.meanRT.toFixed(0)} ms</li>
                                    <li>ÂèçÂ∫îÊó∂Ê≥¢Âä®ÔºàSDÔºâÔºö{gameResult.rtVar.toFixed(0)} ms</li>
                                    <li>ÁªºÂêàÂàÜÔºö{gameResult.composite.toFixed(1)} / 100</li>
                                </ul>
                            ) : (
                                <p className="text-sm">ÊöÇÊó†„ÄÇ</p>
                            )}
                            <div className="mt-4 flex gap-2">
                                <button className="rounded-xl border px-4 py-2 hover:bg-slate-50"
                                        onClick={() => {
                                            setStatus("playing");
                                            setGameResult(null);
                                            setReportText("");
                                        }}>
                                    ÂÜçÊ¨°Ê∏∏Áé©
                                </button>
                                <button className="rounded-xl border px-4 py-2 hover:bg-slate-50"
                                        onClick={() => {
                                            setStatus("idle");
                                            setGameSpec(null);
                                            setAiGameCode("");
                                            setFreeformMeta(null);
                                        }}>
                                    ËøîÂõûÈÖçÁΩÆ
                                </button>
                            </div>
                        </div>

                        <div className="bg-white rounded-2xl shadow p-4">
                            <h2 className="font-semibold">ÁªìÊûúËß£ÈáäÔºàÈùûËØäÊñ≠Ôºâ</h2>
                            <p className="text-sm whitespace-pre-wrap mt-2 min-h-24">{reportText || "Ê≠£Âú®ÁîüÊàê‚Ä¶"}</p>
                            <p className="text-xs text-slate-500 mt-4">ÈáçË¶ÅÂ£∞ÊòéÔºöÊú¨Â∑•ÂÖ∑‰ªÖ‰Ωú‰∏∫Ë∂£Âë≥ÂåñÈ¢ÑÁ≠õÊü•‰∏é‰∫≤Â≠ê‰∫íÂä®ÁöÑËæÖÂä©ÊâãÊÆµÔºå‰∏çËÉΩÊõø‰ª£‰∏¥Â∫äËØäÊñ≠Êàñ‰∏ì‰∏öËØÑ‰º∞„ÄÇ</p>
                        </div>
                    </section>
                )}
            </main>
        </div>
    );
}

/**
 * GameRunnerÔºöÊîØÊåÅ "goNoGo" ‰∏é "oddball"ÔºàÊ®°ÊùøÊ®°ÂºèÔºâ
 */
function GameRunner({spec, onFinish, onCancel}) {
    const {
        template = "goNoGo",
        name = template === "oddball" ? "Oddball" : "Go/No-Go",
        durationSec = 12,
        isiMs = 1000,
        targetRatio = template === "oddball" ? 0.25 : 0.7,
        tokens = ["üê∂", "üê±", "üê∞", "üêº"],
        noGoToken = "üêº",
        targetToken,
        scoring = {weights: {commissionErr: 0.5, omissionErr: 0.3, meanRT: 0.2, rtVar: 0.2}},
    } = spec || {};

    const isi = Math.max(1000, Number(isiMs) || 1000);

    const [running, setRunning] = useState(false);
    const [timeLeft, setTimeLeft] = useState(durationSec);
    const [current, setCurrent] = useState(null);
    const [round, setRound] = useState(0);
    const [shouldTap, setShouldTap] = useState(true);
    const [countdown, setCountdown] = useState(3);

    const totalTrialsRef = useRef(0);
    const targetTrialsRef = useRef(0);
    const nonTargetTrialsRef = useRef(0);
    const hitsRef = useRef(0);
    const commissionsRef = useRef(0);
    const omissionsRef = useRef(0);
    const rtsRef = useRef([]);
    const respondedThisTrialRef = useRef(false);

    // ‚òÖ Êñ∞Â¢ûÔºöÂè™Áª¥Êä§‰∏ÄÊù° trial ÂÆöÊó∂Âô®Èìæ + ÁªìÊùüÊó∂Èó¥
    const trialTimerRef = useRef(null);
    const endAtRef = useRef(0);
    const finishedRef = useRef(false);

    // ËÆ°Êó∂Âô®ÔºöÂºÄÂú∫ÂÄíËÆ°Êó∂
    useEffect(() => {
        let cdTimer;
        if (!running) {
            setCountdown(3);
            cdTimer = setInterval(() => setCountdown((c) => (c > 0 ? c - 1 : 0)), 1000);
            const startT = setTimeout(() => {
                setRunning(true);
                clearInterval(cdTimer);
            }, 3000);
            return () => {
                clearTimeout(startT);
                clearInterval(cdTimer);
            };
        }
    }, [running]);

    // ÂÖ®Â±ÄËÆ°Êó∂
    useEffect(() => {
        if (!running) return;
        endAtRef.current = Date.now() + durationSec * 1000;
        setTimeLeft(durationSec);
        const id = setInterval(() => {
            const left = Math.max(0, Math.ceil((endAtRef.current - Date.now()) / 1000));
            setTimeLeft(left);
            if (left <= 0) clearInterval(id);
        }, 250);
        return () => clearInterval(id);
    }, [running, durationSec]);

    // ‚òÖ Âè™Âú® running=true Êó∂ÂêØÂä®‰∏ÄÊ¨° trial ÈìæÔºõ‰∏ç‰æùËµñ round/timeLeft
    useEffect(() => {
        if (!running) return;

        finishedRef.current = false;

        // ‚òÖ Âú®Âêå‰∏Ä‰∏™ effect ÈáåËÆæÂÆöÁªìÊùüÊó∂Èó¥
        endAtRef.current = Date.now() + durationSec * 1000;

        // ‚òÖ Á°¨Êà™Ê≠¢ÔºöÂà∞ÁÇπ‰∏ÄÂÆöÁªìÊùüÔºàÂèå‰øùÈô©Ôºâ
        const hardStopMs = Math.max(0, endAtRef.current - Date.now() + 20);
        const hardStopTimer = setTimeout(() => {
            if (!finishedRef.current) finish();
        }, hardStopMs);

        const scheduleNext = () => {
            if (finishedRef.current) return;

            // Âà∞Êó∂ÂàôÁªìÊùüÔºàËΩØÊ£ÄÊü•Ôºâ
            if (Date.now() >= endAtRef.current) {
                finish();
                return;
            }

            const isTargetTrial = Math.random() < targetRatio;
            let token = "";
            if (template === "goNoGo") {
                const tkPool = tokens.filter((t) => t !== noGoToken);
                token = isTargetTrial
                    ? tkPool[Math.floor(Math.random() * tkPool.length)] || tkPool[0] || "üôÇ"
                    : noGoToken || "üö´";
                setShouldTap(isTargetTrial);
            } else {
                const tgt = targetToken || tokens[0] || "‚≠ê";
                const standards = tokens.filter((t) => t !== tgt);
                token = isTargetTrial ? tgt : standards[Math.floor(Math.random() * standards.length)] || tgt;
                setShouldTap(isTargetTrial);
            }

            setCurrent({ token, tStart: performance.now() });
            respondedThisTrialRef.current = false;
            totalTrialsRef.current += 1;
            if (isTargetTrial) targetTrialsRef.current += 1; else nonTargetTrialsRef.current += 1;

            clearTimeout(trialTimerRef.current);
            trialTimerRef.current = setTimeout(() => {
                if (!respondedThisTrialRef.current && isTargetTrial) omissionsRef.current += 1;
                scheduleNext();
            }, isi);  // ËøôÈáåÁöÑ isi ÊòØ ‚â•1000 ÁöÑÈÇ£‰∏™
        };

        // ÂêØÂä®Èìæ
        scheduleNext();

        // Ê∏ÖÁêÜ
        return () => {
            clearTimeout(trialTimerRef.current);
            clearTimeout(hardStopTimer);   // ‚òÖ Âà´Âøò‰∫ÜÊ∏ÖÁêÜÁ°¨Êà™Ê≠¢
        };
    }, [running, durationSec, isi, template, targetRatio, tokens, noGoToken, targetToken]);


    function handleTap() {
        if (!current || respondedThisTrialRef.current) return;
        respondedThisTrialRef.current = true;

        const rt = performance.now() - current.tStart;
        if (shouldTap) {
            hitsRef.current += 1;
            rtsRef.current.push(rt);
        } else {
            commissionsRef.current += 1;
        }
    }

    function finish() {
        // Âè™ÂÖÅËÆ∏ÁªìÊùü‰∏ÄÊ¨°
        if (finishedRef.current) return;
        finishedRef.current = true;
        clearTimeout(trialTimerRef.current);

        const total = Math.max(1, totalTrialsRef.current);
        const goTrials = Math.max(1, targetTrialsRef.current);
        const noGoTrials = Math.max(1, nonTargetTrialsRef.current);

        const hitRate = hitsRef.current / goTrials;
        const commissionErr = commissionsRef.current / noGoTrials;
        const omissionErr = omissionsRef.current / goTrials;
        const meanRT = rtsRef.current.length ? rtsRef.current.reduce((a, b) => a + b, 0) / rtsRef.current.length : 0;
        const rtVar = rtsRef.current.length > 1 ? stddev(rtsRef.current) : 0;

        const normRT = clamp01(1 - meanRT / 800);
        const normVar = clamp01(1 - rtVar / 300);
        const composite = clamp01(
            0.4 * hitRate + 0.6 * (1 - commissionErr) - 0.3 * omissionErr + 0.2 * normRT + 0.2 * normVar - 0.1 * Math.abs(normRT - normVar)
        ) * 100;

        setTimeLeft(0);
        onFinish?.({
            totalTrials: total,
            goTrials,
            noGoTrials,
            hitRate,
            commissionErr,
            omissionErr,
            meanRT,
            rtVar,
            composite,
        });
    }

    return (
        <div className="bg-white rounded-2xl shadow p-4">
            <div className="flex items-center justify-between">
                <div>
                    <h2 className="font-semibold">{name}</h2>
                    <p className="text-sm text-slate-500">
                        Êó∂ÈïøÁ∫¶ {durationSec}s ¬∑ ÊØè {isiMs}ms Âà∫ÊøÄ‰∏ÄÊ¨° ¬∑{" "}
                        {template === "goNoGo" ? (
                            <>ÊèêÁ§∫ÔºöÁúãÂà∞ <span className="font-medium">{spec.noGoToken || "üö´"}</span> ‰∏çË¶ÅÁÇπÂáª</>
                        ) : (
                            <>ÊèêÁ§∫ÔºöÂè™ÊúâÁúãÂà∞ <span
                                className="font-medium">{spec.targetToken || spec.tokens?.[0] || "‚≠ê"}</span> ÊâçÁÇπÂáª</>
                        )}
                    </p>
                </div>
                <div className="flex gap-2">
                    <button className="rounded-xl border px-4 py-2 hover:bg-slate-50" onClick={onCancel}>ËøîÂõû</button>
                </div>
            </div>

            <TemplateCountdownPanel running={running} countdown={countdown}/>

            {running && (
                <div className="mt-6">
                    <div className="flex items-center justify-between text-sm text-slate-600">
                        <span>Ââ©‰ΩôÊó∂Èó¥Ôºö{timeLeft}s</span>
                        {template === "goNoGo"
                            ? <span>ÊèêÁ§∫ÔºöÁúãÂà∞ {spec.noGoToken || "üö´"} ‰∏çË¶ÅÁÇπÂáª</span>
                            : <span>ÊèêÁ§∫ÔºöÂè™Âú® {spec.targetToken || spec.tokens?.[0] || "‚≠ê"} Êó∂ÁÇπÂáª</span>}
                    </div>
                    <div className="mt-4 grid place-items-center">
                        <button onClick={handleTap}
                                className="select-none w-56 h-56 text-7xl rounded-3xl bg-gradient-to-b from-sky-50 to-sky-100 border shadow-inner active:translate-y-[1px]">
                            <span>{current?.token ?? ""}</span>
                        </button>
                    </div>
                    <p className="text-center text-slate-500 mt-4">
                        {template === "goNoGo" ? <>Âø´ÈÄüÁÇπÂáªÈùû {spec.noGoToken || "üö´"} ÁöÑÂèØÁà±ÂÖÉÁ¥†ÔºÅ</>
                            : <>Âè™Âú®ÁúãÂà∞ {spec.targetToken || spec.tokens?.[0] || "‚≠ê"} Êó∂ÁÇπÂáªÔºÅ</>}
                    </p>
                </div>
            )}
        </div>
    );
}

function TemplateCountdownPanel({running, countdown}) {
    if (running) return null;
    return (
        <div className="mt-6 text-center">
            <p className="text-lg">ÂáÜÂ§áÂºÄÂßã‚Ä¶</p>
            <p className="text-5xl mt-2 font-bold">{countdown || 0}</p>
        </div>
    );
}

/**
 * Âä®ÊÄÅËΩΩÂÖ•Ëá™Áî±ÁîüÊàêÂ∞èÊ∏∏ÊàèÊ®°ÂùóÔºàES Module Â≠óÁ¨¶‰∏≤Ôºâ
 * Á∫¶ÂÆöÔºö
 * - Ê®°ÂùóÂøÖÈ°ª export default ‰∏Ä‰∏™ React ÁªÑ‰ª∂ÔºåÂπ∂Âú® ~durationSec ÂÜÖË∞ÉÁî® onFinish(metrics)
 * - Âè¶Â§ñÂøÖÈ°ªÂØºÂá∫ metaÔºàÂê´ rulesÔºâ‰∏é explain(metrics)ÔºàÁî®‰∫éÂ±ïÁ§∫ËßÑÂàôÂíåÁªìÊûúËß£ÈáäÔºâ
 */
function DynamicGameRunner({
                               code, onFinish, onCancel, fallbackTokens, durationSec = 12, onError,
                               onExplainText, onMeta, fallbackExplain
                           }) {
    const [Comp, setComp] = useState(null);
    const [err, setErr] = useState("");
    const [meta, setMeta] = useState(null);            // UPDATE: ‰øùÂ≠òËßÑÂàôÁ≠â
    const explainRef = useRef(null);                   // UPDATE: ‰øùÂ≠ò explain ÂáΩÊï∞
    const [started, setStarted] = useState(false);     // UPDATE: ËßÑÂàôÈ°µ‚ÄúÂºÄÂßãÊ∏∏Êàè‚ÄùÊåâÈíÆÊéßÂà∂


    function normalizeMetrics(raw = {}) {
        const toNum = (v, d = 0) => {
            const n = Number(v);
            return Number.isFinite(n) ? n : d;
        };
        const unit01 = (v) => {
            const n = Number(v);
            if (!Number.isFinite(n)) return null;
            // ÂÖºÂÆπÁôæÂàÜÊï∞Ôºö>1 ËßÜ‰∏∫ÁôæÂàÜÊï∞
            return n > 1 ? clamp01(n / 100) : clamp01(n);
        };

        // ÂÖºÂÆπÂêÑÁßçÂ≠óÊÆµÂëΩÂêç
        const goTrials = toNum(raw.goTrials, toNum(raw.targets ?? raw.targetTrials, 0));
        const noGoTrials = toNum(raw.noGoTrials, toNum(raw.nontargetTrials ?? raw.standardTrials, 0));
        const hits = toNum(raw.hits ?? raw.correct ?? raw.correctHits, 0);
        const commissions = toNum(raw.commissions ?? raw.falseAlarms ?? raw.falsePositives, 0);
        const omissions = toNum(raw.omissions ?? raw.misses, 0);

        let hitRate = unit01(raw.hitRate);
        if (hitRate === null) hitRate = goTrials > 0 ? clamp01(hits / goTrials) : 0;

        let commissionErr = unit01(raw.commissionErr);
        if (commissionErr === null) commissionErr = noGoTrials > 0 ? clamp01(commissions / noGoTrials) : 0;

        let omissionErr = unit01(raw.omissionErr);
        if (omissionErr === null) omissionErr = goTrials > 0 ? clamp01(omissions / goTrials) : 0;

        const meanRT = toNum(raw.meanRT ?? raw.avgRT ?? raw.meanRt, 0);
        const rtVar = toNum(raw.rtVar ?? raw.sdRT ?? raw.stdRT ?? raw.stdDev, 0);

        // ‰∏éÊ®°Êùø‰∏ÄËá¥ÁöÑÁªºÂêàÂàÜÂÖ¨Âºè
        const normRT = clamp01(1 - meanRT / 800);
        const normVar = clamp01(1 - rtVar / 300);
        const composite = Number.isFinite(Number(raw.composite))
            ? Number(raw.composite)
            : clamp01(
            0.4 * hitRate +
            0.6 * (1 - commissionErr) -
            0.3 * omissionErr +
            0.2 * normRT +
            0.2 * normVar -
            0.1 * Math.abs(normRT - normVar)
        ) * 100;

        return {
            totalTrials: toNum(raw.totalTrials, goTrials + noGoTrials),
            goTrials,
            noGoTrials,
            hits,
            commissions,
            omissions,
            hitRate,
            commissionErr,
            omissionErr,
            meanRT,
            rtVar,
            composite,
        };
    }

    function stripCodeFences(s = '') {
        return s.replace(/^```[a-z]*\s*/i, '').replace(/```$/i, '').trim();
    }


    useEffect(() => {
        let mounted = true;
        (async () => {
            try {
                setErr("");
                const cleaned = stripCodeFences(code);

                const bareUse = (name) =>
                    new RegExp(String.raw`(^|[^.\w$])${name}\s*\(`).test(cleaned); // ‰∏çÊòØ React.useX(...)
                const declaredUse = (name) =>
                    // Ëß£ÊûÑÊàñÂçïÁã¨Â£∞ÊòéÔºå= React Êàñ = window.React ÈÉΩÁÆóÂ∑≤Â£∞Êòé
                    new RegExp(
                        String.raw`\b(?:const|let|var)\s*(?:\{[^}]*\b${name}\b[^}]*\}|${name})\s*=\s*(?:window\.)?React\b`
                    ).test(cleaned) ||
                    new RegExp(String.raw`\b(?:const|let|var)\s+${name}\b\s*=`).test(cleaned) ||
                    new RegExp(String.raw`${name}\s*=\s*(?:window\.)?React\.${name}\b`).test(cleaned);


                // ÊòØÂê¶ÈúÄË¶ÅÊàë‰ª¨Â∏ÆÂøôËß£ÊûÑ hooksÔºàÊ®°Âûã‰ª£Á†ÅÈáåÁî®Âà∞‰∫Ü useState/useEffect/useRefÔºå‰ΩÜÊ≤°ÊúâËá™Â∑±Ëß£ÊûÑÔºâ
                const needsUseState = bareUse("useState") && !declaredUse("useState");
                const needsUseEffect = bareUse("useEffect") && !declaredUse("useEffect");
                const needsUseRef = bareUse("useRef") && !declaredUse("useRef");


                const hookPieces = [];
                if (needsUseState) hookPieces.push("useState");
                if (needsUseEffect) hookPieces.push("useEffect");
                if (needsUseRef) hookPieces.push("useRef");

                // 2) Âè™Âú®ÁúüÁöÑÁî®Âà∞ h(...) ‰∏îÊ≤°Â£∞ÊòéËøá h Êó∂ÔºåÊâçÊ≥®ÂÖ• h
                const callsH = /\bh\s*\(/.test(cleaned);
                const hasH = /\b(?:const|let|var)\s+h\s*=/.test(cleaned);
                const needsH = callsH && !hasH;

                // 3) ÂÖàÊ≥®ÂÖ• hooksÔºàÂè™Ê≥®ÂÖ•Áº∫ÁöÑÈÇ£‰∫õÔºâÔºåÂÜçÊ≥®ÂÖ• hÔºõÈÉΩÂü∫‰∫é window.React
                const prologue = [
                    hookPieces.length ? `const { ${hookPieces.join(", ")} } = window.React;` : "",
                    needsH ? "const h = window.React.createElement;" : "",
                ]
                    .filter(Boolean)
                    .join("\n");

                const wrapped = `${prologue}\n${cleaned}`;

                const mod = await importModuleFromString(wrapped);
                if (!mod?.default) throw new Error("Ê®°ÂùóÊú™ÂØºÂá∫ default ÁªÑ‰ª∂");

                if (mounted) {
                    setComp(() => mod.default);
                    if (mod.meta && typeof mod.meta === "object") {
                        setMeta(mod.meta);
                        onMeta?.(mod.meta);
                    } else {
                        setMeta(null);
                        onMeta?.(null);
                    }
                    explainRef.current = typeof mod.explain === "function" ? mod.explain : null;
                }
            } catch (e) {
                const msg = e?.message || String(e);
                if (mounted) setErr(msg);
                onError?.(msg);
                console.error("[DynamicGameRunner] Load error:", msg);
            }
        })();
        return () => {
            mounted = false;
        };
    }, [code]);


    // ÁÇπÂáª‚ÄúÂºÄÂßãÊ∏∏Êàè‚ÄùÂêéÊâçÊåÇËΩΩ Comp
    const handleStart = () => setStarted(true);

    // ÂåÖË£Ö onFinishÔºöÂÖàÊåâËá™Áî±Ê®°ÂùóÁöÑ explain Ëß£ÈáäÔºåÂê¶ÂàôÂõûÈÄÄ
    const handleFinish = async (metrics) => {
        const safe = normalizeMetrics(metrics || {});
        // Ëß£ÈáäÈÄªËæëËßÅÊîπÂä® 2Ôºâ
        await Promise.resolve(fallbackExplain?.(safe));  // ÂßãÁªàËµ∞‚ÄúÂéüÊù•ÁöÑÂßîÂ©âËß£Èáä‚Äù
        onFinish?.(safe);
    };

    if (err) {
        return (
            <div className="bg-white rounded-2xl shadow p-4">
                <h2 className="font-semibold">ËøêË°åÂ§±Ë¥•</h2>
                <p className="text-sm text-rose-600 mt-2">{err}</p>
                <div className="mt-3">
                    <button className="rounded-xl border px-4 py-2 hover:bg-slate-50" onClick={onCancel}>ËøîÂõû</button>
                </div>
            </div>
        );
    }

    // ËßÑÂàôÈ¢ÑËßàÈ°µÔºàÊú™ÂºÄÂßãÔºâ
    if (!started) {
        return (
            <div className="bg-white rounded-2xl shadow p-4 text-left">
                <div className="flex items-start justify-between">
                    <div>
                        <h2 className="font-semibold">{meta?.title || "Ëá™Áî±ÁîüÊàêÂ∞èÊ∏∏Êàè"}</h2>
                        <p className="text-xs text-slate-500 mt-1">Êó∂Èïø ‚â§ {durationSec}s</p>
                    </div>
                    <button className="rounded-xl border px-3 py-1 text-sm hover:bg-slate-50" onClick={onCancel}>ËøîÂõû
                    </button>
                </div>
                <div className="mt-3">
                    <h3 className="text-sm font-semibold">ËßÑÂàô</h3>
                    {Array.isArray(meta?.rules) && meta.rules.length > 0 ? (
                        <ul className="list-disc pl-6 mt-1 text-sm">
                            {meta.rules.map((r, i) => <li key={i}>{r}</li>)}
                        </ul>
                    ) : (
                        <p className="text-sm text-slate-600">ÂºÄÂßãÂâçËØ∑Ê†πÊçÆÂ±èÂπïÊèêÁ§∫ËøõË°åÊìç‰ΩúÔºõËÆ°Êó∂Âà∞ËææÂêéËá™Âä®ÁªìÊùü„ÄÇ</p>
                    )}
                    {meta?.scoringNotes && <p className="text-xs text-slate-500 mt-2">ËØÑÂàÜÊèêÁ§∫Ôºö{meta.scoringNotes}</p>}
                </div>
                <div className="mt-4">
                    <button
                        className="rounded-xl bg-violet-600 text-white px-4 py-2 font-semibold shadow hover:bg-violet-700"
                        onClick={handleStart}>
                        ÂºÄÂßãÊ∏∏Êàè
                    </button>
                </div>
            </div>
        );
    }

    if (!Comp) {
        return <div className="bg-white rounded-2xl shadow p-4 text-sm text-slate-600">Ê≠£Âú®Âä†ËΩΩÂ∞èÊ∏∏ÊàèÊ®°Âùó‚Ä¶</div>;
    }

    // ÁúüÊ≠£ÂºÄÂßãÂêéÔºåÈöêËóè‚ÄúÂºÄÂßã‚ÄùÊåâÈíÆÔºå‰ªÖÊ∏≤ÊüìÊ∏∏ÊàèÁªÑ‰ª∂
    return (
        <div className="bg-white rounded-2xl shadow p-4">
            <Comp onFinish={handleFinish} onCancel={onCancel} tokens={fallbackTokens} durationSec={durationSec}/>
        </div>
    );
}

// Â∞ÜÂ≠óÁ¨¶‰∏≤‰Ωú‰∏∫ ES Module Âä®ÊÄÅ import
async function importModuleFromString(code) {
    const blob = new Blob([code], {type: "text/javascript"});
    const url = URL.createObjectURL(blob);
    try {
        const mod = await import(/* @vite-ignore */ url);
        return mod;
    } finally {
        URL.revokeObjectURL(url);
    }
}

function clamp01(x) {
    return Math.max(0, Math.min(1, x));
}

function stddev(arr) {
    const m = arr.reduce((a, b) => a + b, 0) / arr.length;
    const v = arr.reduce((a, b) => a + (b - m) ** 2, 0) / (arr.length - 1 || 1);
    return Math.sqrt(v);
}
